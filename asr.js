// asr.js
import fetch from "node-fetch";
import FormData from "form-data";
import { debug, safeStr } from "./utils.js";

// ========================
// Telegram Upload Helper
// ========================
async function uploadToTelegramAndGetUrl(mp3Url) {
  try {
    debug(`üì° –ó–∞–≥—Ä—É–∂–∞–µ–º mp3 –≤ Telegram —á–µ—Ä–µ–∑ ${process.env.TG_UPLOAD_CHAT_ID}...`);

    // –°–∫–∞—á–∏–≤–∞–µ–º mp3 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    const audioRes = await fetch(mp3Url, { timeout: 20000 });
    if (!audioRes.ok) throw new Error(`Download failed: ${audioRes.statusText}`);
    const audioBuffer = await audioRes.arrayBuffer();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const formData = new FormData();
    formData.append("chat_id", process.env.TG_UPLOAD_CHAT_ID);
    formData.append("audio", Buffer.from(audioBuffer), "call.mp3");

    const sendRes = await fetch(
      `https://api.telegram.org/bot${process.env.TG_BOT_TOKEN}/sendAudio`,
      { method: "POST", body: formData }
    );

    const sendJson = await sendRes.json();
    if (!sendJson.ok) throw new Error(`Telegram sendAudio failed: ${safeStr(sendJson)}`);
    const file_id = sendJson.result?.audio?.file_id;

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
    const getFile = await fetch(
      `https://api.telegram.org/bot${process.env.TG_BOT_TOKEN}/getFile?file_id=${file_id}`
    );
    const fileJson = await getFile.json();
    if (!fileJson.ok) throw new Error(`getFile failed: ${safeStr(fileJson)}`);

    const tgFileUrl = `https://api.telegram.org/file/bot${process.env.TG_BOT_TOKEN}/${fileJson.result.file_path}`;
    debug(`‚úÖ mp3 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram: ${tgFileUrl}`);

    return tgFileUrl;
  } catch (e) {
    console.error("‚ùå uploadToTelegramAndGetUrl:", e.message);
    return null;
  }
}

// ========================
// Whisper Transcription
// ========================
export async function transcribeAudio(originalUrl) {
  try {
    if (!originalUrl) {
      debug("‚ö†Ô∏è –ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ mp3, –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏");
      return null;
    }

    // 1Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ Telegram
    const tgUrl = await uploadToTelegramAndGetUrl(originalUrl);
    if (!tgUrl) {
      debug("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å mp3 –≤ Telegram, –ø—Ä–æ–ø—É—Å–∫");
      return null;
    }

    // 2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ OpenAI Whisper
    debug("üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Whisper...");
    const audioRes = await fetch(tgUrl);
    if (!audioRes.ok) throw new Error(`Failed to fetch from Telegram: ${audioRes.status}`);

    const audioBuffer = await audioRes.arrayBuffer();
    const formData = new FormData();
    formData.append("file", Buffer.from(audioBuffer), "audio.mp3");
    formData.append("model", "whisper-1");

    const openaiRes = await fetch("https://api.openai.com/v1/audio/transcriptions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: formData,
    });

    const json = await openaiRes.json();
    if (!json.text) throw new Error(`Whisper response invalid: ${safeStr(json)}`);

    debug("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞");
    return json.text;
  } catch (e) {
    console.error("‚ùå transcribeAudio error:", safeStr(e));
    return null;
  }
}
