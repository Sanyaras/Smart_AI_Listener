// ====================== telegram.js ‚Äî industrial+debug+unified v3.8-final ======================
// Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, relay, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, QA-–∞–Ω–∞–ª–∏–∑ –∏ Telegram-–æ—Ç—á—ë—Ç (–≤—Å—ë –≤ –æ–¥–∏–Ω —á–∞—Ç)

import crypto from "crypto";
import { fetchWithTimeout, cap, safeStr } from "./utils.js";
import { getUnprocessedCalls, markCallProcessed } from "./supabaseStore.js";
import { transcribeAudioFromUrl as transcribeAudio } from "./asr.js";
import { analyzeTranscript, formatQaForTelegram } from "./qa_assistant.js";

export const TELEGRAM = {
  TG_BOT_TOKEN: "",
  TG_CHAT_ID: "",
  TG_WEBHOOK_SECRET: "",
  TG_SECRET: "",
  TG_UPLOAD_CHAT_ID: "",
  NODE_ENV: "",
};

/* -------------------- INIT -------------------- */
export function initTelegramEnv(env = process.env) {
  TELEGRAM.TG_BOT_TOKEN = env.TG_BOT_TOKEN || env.TELEGRAM_BOT_TOKEN || "";
  TELEGRAM.TG_CHAT_ID = env.TG_CHAT_ID || env.TELEGRAM_CHAT_ID || "";
  TELEGRAM.TG_UPLOAD_CHAT_ID = env.TG_UPLOAD_CHAT_ID || TELEGRAM.TG_CHAT_ID;
  TELEGRAM.TG_WEBHOOK_SECRET = (env.TG_WEBHOOK_SECRET || "").trim();
  TELEGRAM.TG_SECRET = TELEGRAM.TG_WEBHOOK_SECRET || "";
  TELEGRAM.NODE_ENV = env.NODE_ENV || "development";

  if (!TELEGRAM.TG_SECRET) {
    if (TELEGRAM.NODE_ENV === "production") {
      throw new Error("TG_WEBHOOK_SECRET is required in production");
    } else {
      TELEGRAM.TG_SECRET = crypto.randomBytes(18).toString("hex");
      console.warn("‚ö†Ô∏è TG_WEBHOOK_SECRET not set ‚Äî using ephemeral:", TELEGRAM.TG_SECRET);
    }
  }

  if (!TELEGRAM.TG_BOT_TOKEN) {
    console.warn("‚ö†Ô∏è TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Telegram –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
  } else {
    console.log("ü§ñ Telegram API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }
}

/* -------------------- CORE TG REQUEST -------------------- */
async function tgRequest(apiPath, bodyObj, ms = 20000, retries = 2) {
  if (!TELEGRAM.TG_BOT_TOKEN)
    throw new Error("TG_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (initTelegramEnv –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω)");
  const url = `https://api.telegram.org/bot${TELEGRAM.TG_BOT_TOKEN}/${apiPath}`;
  const payload = JSON.stringify(bodyObj);

  let lastErr;
  for (let attempt = 0; attempt <= retries; attempt++) {
    try {
      const r = await fetchWithTimeout(
        url,
        { method: "POST", headers: { "content-type": "application/json" }, body: payload },
        ms
      );
      const txt = await r.text();
      const json = JSON.parse(txt || "{}");

      if (!r.ok || !json.ok) {
        throw new Error(`Telegram ${apiPath} ${r.status}: ${txt}`);
      }
      return json;
    } catch (e) {
      lastErr = e;
      console.warn(`‚ö†Ô∏è Telegram retry #${attempt + 1}/${retries + 1}: ${safeStr(e)}`);
      await new Promise((r) => setTimeout(r, 1200 * (attempt + 1)));
    }
  }
  throw lastErr;
}

/* -------------------- SEND MESSAGE -------------------- */
export async function sendTG(text) {
  if (!TELEGRAM.TG_CHAT_ID) {
    console.warn("‚ö†Ô∏è sendTG: TG_CHAT_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    return false;
  }

  const body = {
    chat_id: TELEGRAM.TG_CHAT_ID,
    text: cap(text || "(–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)", 3900),
    parse_mode: "HTML",
    disable_web_page_preview: true,
  };

  try {
    console.log(`üì§ sendTG ‚Üí chat_id=${TELEGRAM.TG_CHAT_ID}`);
    const res = await tgRequest("sendMessage", body, 10000, 1);
    if (res?.ok) console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ");
    return true;
  } catch (e) {
    console.error("‚ùå sendTG –æ—à–∏–±–∫–∞:", safeStr(e));
    return false;
  }
}

/* -------------------- RELAY -------------------- */
export async function tgRelayAudio(origUrl, captionForTg = "üéß Relay upload") {
  const chatId = TELEGRAM.TG_UPLOAD_CHAT_ID || TELEGRAM.TG_CHAT_ID;
  if (!chatId) throw new Error("TG_UPLOAD_CHAT_ID/TG_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

  console.log(`üì° Relay upload ‚Üí ${origUrl} ‚Üí —á–∞—Ç ${chatId}`);

  let sendResp;
  try {
    sendResp = await tgRequest(
      "sendDocument",
      {
        chat_id: chatId,
        document: origUrl,
        caption: captionForTg,
        parse_mode: "HTML",
      },
      25000
    );
  } catch (e) {
    console.warn("‚ö†Ô∏è sendDocument –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, fallback ‚Üí sendAudio");
    sendResp = await tgRequest(
      "sendAudio",
      { chat_id: chatId, audio: origUrl, caption: captionForTg },
      25000
    );
  }

  const fileId =
    sendResp?.result?.document?.file_id ||
    sendResp?.result?.audio?.file_id ||
    sendResp?.result?.voice?.file_id;
  if (!fileId) throw new Error("tgRelayAudio: Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª file_id");

  const fileInfo = await tgRequest("getFile", { file_id: fileId }, 15000);
  const filePath = fileInfo?.result?.file_path;
  if (!filePath) throw new Error("tgRelayAudio: Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª file_path");

  const finalUrl = `https://api.telegram.org/file/bot${TELEGRAM.TG_BOT_TOKEN}/${filePath}`;
  console.log(`‚úÖ Relay –≥–æ—Ç–æ–≤: ${finalUrl}`);
  return finalUrl;
}

/* -------------------- MAIN PROCESS -------------------- */
export async function processCallsAndReport() {
  try {
    const unprocessed = await getUnprocessedCalls(5);
    if (!unprocessed?.length) {
      console.log("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
      return;
    }

    for (const call of unprocessed) {
      const { note_id, link } = call;
      console.log(`\n==============================\n‚û°Ô∏è –ó–≤–æ–Ω–æ–∫ #${note_id}\n==============================`);

      let relayUrl = link;
      if (link && link.includes("megapbx.ru")) {
        try {
          relayUrl = await tgRelayAudio(link, `üìé Relay AmoCRM #${note_id}`);
        } catch (e) {
          console.error(`‚ùå Relay –æ—à–∏–±–∫–∞ #${note_id}:`, safeStr(e));
          continue;
        }
      }

      if (!relayUrl) {
        console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ #${note_id}: relayUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        continue;
      }

      // üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
      console.log(`üéß –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é #${note_id}...`);
      let transcript;
      try {
        transcript = await transcribeAudio(relayUrl);
        console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞ (${transcript?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ #${note_id}:`, safeStr(e));
        continue;
      }

      if (!transcript?.trim()) {
        console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ #${note_id}: –ø—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è`);
        continue;
      }

      // üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ Telegram (–≤ —Å–ø–æ–π–ª–µ—Ä–µ)
      const cleanTranscript = transcript.replace(/[<>&]/g, ""); // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
      const shortTranscript = cap(cleanTranscript, 3900);
      const spoilerMsg = `üéôÔ∏è <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–≤–æ–Ω–∫–∞ #${note_id}</b>\n||${shortTranscript}||`;
      await sendTG(spoilerMsg);

      // üß† –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞
      console.log("üß† –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞...");
      let qa;
      try {
        qa = await analyzeTranscript(transcript, { callId: note_id });
        console.log("‚úÖ QA-–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω");
      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ QA #${note_id}:`, safeStr(e));
        await sendTG(`‚ö†Ô∏è –û—à–∏–±–∫–∞ QA –¥–ª—è –∑–≤–æ–Ω–∫–∞ #${note_id}: ${safeStr(e)}`);
        continue;
      }

      // üìä –û—Ç—á—ë—Ç –≤ Telegram
      const qaText = formatQaForTelegram(qa);
      const reportMsg = `üìû <b>–ó–≤–æ–Ω–æ–∫ #${note_id}</b>\n${qaText}`;
      const ok = await sendTG(reportMsg);
      if (!ok) console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∑–≤–æ–Ω–∫—É #${note_id}`);

      // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
      await markCallProcessed(note_id, transcript, qa);
      console.log(`üíæ –ó–≤–æ–Ω–æ–∫ #${note_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ`);
    }

    console.log("\n‚úÖ processCallsAndReport –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫\n");
  } catch (e) {
    console.error("üí• processCallsAndReport –æ—à–∏–±–∫–∞:", safeStr(e));
  }
}
