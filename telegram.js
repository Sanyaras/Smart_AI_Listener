// telegram.js
import fetch from "node-fetch";
import { Telegraf } from "telegraf";
import fs from "fs";
import FormData from "form-data";
import { debug, safeStr } from "./utils.js";
import { getUnprocessedCalls, markCallProcessed } from "./supabaseStore.js";
import { transcribeAudio } from "./asr.js";
import { analyzeTranscript, formatQaForTelegram } from "./qa_assistant.js";

let TELEGRAM_BOT_TOKEN = null;
let TELEGRAM_CHAT_ID = null;
let TG_UPLOAD_CHAT_ID = null;
let bot = null;

export async function initTelegram(env = process.env, app = null) {
  TELEGRAM_BOT_TOKEN = env.TELEGRAM_BOT_TOKEN || env.TG_BOT_TOKEN;
  TELEGRAM_CHAT_ID = env.TELEGRAM_CHAT_ID || env.TG_CHAT_ID;
  TG_UPLOAD_CHAT_ID = env.TG_UPLOAD_CHAT_ID || TELEGRAM_CHAT_ID;

  if (!TELEGRAM_BOT_TOKEN) {
    console.warn("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî Telegram –æ—Ç–∫–ª—é—á—ë–Ω");
    return;
  }

  bot = new Telegraf(TELEGRAM_BOT_TOKEN);

  bot.start((ctx) => ctx.reply("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"));
  bot.command("scan", async (ctx) => {
    await ctx.reply("üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω –∑–≤–æ–Ω–∫–æ–≤...");
    await processCallsAndReport(ctx);
  });

  bot.on("message", async (ctx) => {
    const msg = ctx.message;

    if (msg.voice || msg.audio) {
      const fileId = msg.voice?.file_id || msg.audio?.file_id;
      console.log(`üé§ –ü–æ–ª—É—á–µ–Ω –≥–æ–ª–æ—Å/–∞—É–¥–∏–æ file_id=${fileId}`);
      try {
        const fileRes = await fetch(
          `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`
        );
        const fileInfo = await fileRes.json();
        const filePath = fileInfo.result.file_path;
        const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;

        await ctx.reply("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...");
        const transcript = await transcribeAudio(fileUrl);

        if (transcript) {
          await ctx.reply(`üó£Ô∏è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n\n${transcript.slice(0, 4000)}`);
          const qa = await analyzeTranscript(transcript, { callId: "TG-VOICE" });
          const qaText = formatQaForTelegram(qa);
          await ctx.reply(`üìä –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞:\n${qaText}`);
        } else {
          await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å.");
        }
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:", err);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.");
      }
    } else if (msg.text) {
      await ctx.reply("üì® –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n/scan ‚Äî –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤");
    }
  });

  // === Webhook –∏–ª–∏ fallback –Ω–∞ polling ===
  const webhookDomain = (env.TG_WEBHOOK_URL || process.env.TG_WEBHOOK_URL || "")
    .trim()
    .replace(/^=+/, "");
  const webhookPath = `/tg/webhook/${env.TG_WEBHOOK_SECRET || "secret"}`;

  if (!webhookDomain || !webhookDomain.startsWith("https://")) {
    console.warn(`‚ö†Ô∏è TG_WEBHOOK_URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (${webhookDomain || "–ø—É—Å—Ç–æ"}) ‚Äî Telegram –≤ polling`);
    await bot.launch();
  } else if (app) {
    try {
      app.use(await bot.createWebhook({ domain: webhookDomain, path: webhookPath }));
      console.log(`ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook: ${webhookDomain}${webhookPath}`);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ webhook, fallback polling:", err.message);
      await bot.launch();
    }
  } else {
    await bot.launch();
    console.log("‚öôÔ∏è Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ polling —Ä–µ–∂–∏–º–µ (app –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)");
  }

  const AUTO_SCAN_MINUTES = parseInt(env.AUTO_SCAN_MINUTES || "5", 10);
  if (AUTO_SCAN_MINUTES > 0) {
    setInterval(async () => {
      console.log(`üïí –ê–≤—Ç–æ-—Å–∫–∞–Ω –∑–≤–æ–Ω–∫–æ–≤ (${AUTO_SCAN_MINUTES} –º–∏–Ω)...`);
      await processCallsAndReport();
    }, AUTO_SCAN_MINUTES * 60 * 1000);
  }
}

export async function sendTGMessage(text, chatOverride = null) {
  try {
    if (!bot) return;
    const chatId = chatOverride || TELEGRAM_CHAT_ID;
    await bot.telegram.sendMessage(chatId, text, { parse_mode: "HTML" });
  } catch (e) {
    console.error("‚ùå sendTGMessage:", e.message);
  }
}

export async function uploadToTelegramAndGetUrl(mp3Url) {
  try {
    console.log("üéß Uploading audio to Telegram via relay...");
    if (!TELEGRAM_BOT_TOKEN || !TG_UPLOAD_CHAT_ID) {
      console.warn("‚ö†Ô∏è Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî relay –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ");
      return null;
    }

    const res = await fetch(mp3Url);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${mp3Url}: ${res.status}`);
    const buffer = await res.arrayBuffer();

    const tmpFile = `/tmp/audio_${Date.now()}.mp3`;
    fs.writeFileSync(tmpFile, Buffer.from(buffer));

    const formData = new FormData();
    formData.append("chat_id", TG_UPLOAD_CHAT_ID);
    formData.append("document", fs.createReadStream(tmpFile));

    const uploadUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`;
    const uploadRes = await fetch(uploadUrl, { method: "POST", body: formData });
    const uploadJson = await uploadRes.json();

    if (!uploadJson.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Telegram upload:", uploadJson);
      return null;
    }

    const fileId = uploadJson.result.document.file_id;
    const fileInfoRes = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`
    );
    const fileInfo = await fileInfoRes.json();

    if (!fileInfo.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è file_path:", fileInfo);
      return null;
    }

    const filePath = fileInfo.result.file_path;
    const finalUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
    console.log("‚úÖ Relay –≥–æ—Ç–æ–≤:", finalUrl);
    return finalUrl;
  } catch (e) {
    console.error("‚ùå uploadToTelegramAndGetUrl:", safeStr(e));
    return null;
  }
}

export async function processCallsAndReport(ctx = null) {
  try {
    const unprocessed = await getUnprocessedCalls(5);
    if (!unprocessed.length) {
      const msg = "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤";
      if (ctx) await ctx.reply(msg);
      console.log(msg);
      return;
    }

    for (const call of unprocessed) {
      const { note_id, link } = call;
      console.log(`üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–≤–æ–Ω–æ–∫ #${note_id}`);

      let relayUrl = link;
      if (link && link.includes("megapbx.ru")) {
        relayUrl = await uploadToTelegramAndGetUrl(link);
      }

      if (!relayUrl) continue;

      const transcript = await transcribeAudio(relayUrl);
      if (!transcript) continue;

      const qa = await analyzeTranscript(transcript, { callId: note_id });
      const qaText = formatQaForTelegram(qa);

      await sendTGMessage(`üìû <b>–ó–≤–æ–Ω–æ–∫ #${note_id}</b>\n${qaText}`);
      await markCallProcessed(note_id, transcript, qa);

      console.log(`‚úÖ –ó–≤–æ–Ω–æ–∫ #${note_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
    }

    if (ctx) await ctx.reply("‚úÖ –í—Å–µ –∑–≤–æ–Ω–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
  } catch (e) {
    console.error("‚ùå processCallsAndReport:", safeStr(e));
    if (ctx) await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–≤–æ–Ω–∫–æ–≤");
  }
}
