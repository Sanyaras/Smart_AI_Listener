// ====================== index.js ‚Äî Smart AI Listener (ultimate v3.2) ======================
// –ù–∞–¥—ë–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è: —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ –ø–∞–¥–µ–Ω–∏—è–º, –ª–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —à–∞–≥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–≤–æ–Ω–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.

import express from "express";
import bodyParser from "body-parser";
import { processAmoCalls } from "./amo.js";
import { transcribeAudioFromUrl as transcribeAudio } from "./asr.js";
import { analyzeTranscript, formatQaForTelegram } from "./qa_assistant.js";
import {
  getUnprocessedCalls,
  markCallProcessed,
  getAmoTokens
} from "./supabaseStore.js";
import {
  initTelegramEnv,
  sendTG as sendTGMessage,
  tgRelayAudio as uploadToTelegramAndGetUrl
} from "./telegram.js";
import { fetchWithTimeout, debug, safeStr } from "./utils.js";

const app = express();
app.use(bodyParser.json({ limit: "15mb" }));

const PORT = process.env.PORT || 3000;
const POLL_INTERVAL_MIN =
  parseInt(process.env.AMO_POLL_MINUTES || "5", 10) * 60 * 1000;

// ====================== INIT TELEGRAM ======================
try {
  initTelegramEnv(process.env);
  console.log("ü§ñ Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (relay mode)");
} catch (err) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:", err);
}

// ====================== CORE MAIN CYCLE ======================
async function mainCycle() {
  console.log("\n==============================");
  console.log(`üåÄ mainCycle() —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª @ ${new Date().toLocaleString()}`);
  console.log("==============================");

  try {
    debug("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∑–≤–æ–Ω–∫–∏ –∏–∑ AmoCRM...");
    const found = await processAmoCalls().catch((e) => {
      console.error("‚ö†Ô∏è processAmoCalls –æ—à–∏–±–∫–∞:", safeStr(e));
      return 0;
    });
    debug(`üì• –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${found}`);

    const unprocessed = await getUnprocessedCalls(10);
    if (!unprocessed?.length) {
      debug("üì≠ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ Supabase");
      return;
    }

    debug(`üéß –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${unprocessed.length} –∑–≤–æ–Ω–∫–æ–≤...`);
    for (const call of unprocessed) {
      const { note_id, link } = call;
      console.log(`\n‚û°Ô∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤–æ–Ω–∫–∞ #${note_id}`);
      let relayUrl = link;

      // 0Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (MegaPBX)
      if (link && link.includes("megapbx.ru")) {
        console.log("üì° MegaPBX —Å—Å—ã–ª–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, relay —á–µ—Ä–µ–∑ Telegram...");
        relayUrl = await uploadToTelegramAndGetUrl(link, `üéß Relay –¥–ª—è #${note_id}`).catch((e) => {
          console.error("‚ùå Relay –æ—à–∏–±–∫–∞:", safeStr(e));
          return null;
        });
        if (!relayUrl) {
          console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ #${note_id}: relay –Ω–µ —É–¥–∞–ª–æ—Å—å`);
          continue;
        }
      }

      // 1Ô∏è‚É£ Whisper-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
      console.log(`üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∑–≤–æ–Ω–æ–∫ #${note_id}...`);
      const transcript = await transcribeAudio(relayUrl).catch((e) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:", safeStr(e));
        return null;
      });

      if (!transcript || !transcript.trim()) {
        console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–≤–æ–Ω–∫–∞ #${note_id}: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞`);
        continue;
      }

      console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞ (${transcript.length} —Å–∏–º–≤–æ–ª–æ–≤)`);

      // 2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ QA Assistant
      console.log("üß† –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞...");
      let qa;
      try {
        qa = await analyzeTranscript(transcript, { callId: note_id });
        console.log("‚úÖ QA –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ");
        console.log("üß© –§—Ä–∞–≥–º–µ–Ω—Ç JSON:", JSON.stringify(qa).slice(0, 200));
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–≤–æ–Ω–∫–∞:", safeStr(e));
        await sendTGMessage(`‚ùóÔ∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–∞ #${note_id}: ${safeStr(e)}`);
        continue;
      }

      // 3Ô∏è‚É£ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç—á—ë—Ç –≤ Telegram
      let qaText = "";
      try {
        qaText = formatQaForTelegram(qa);
        await sendTGMessage(`üìû <b>–ó–≤–æ–Ω–æ–∫ #${note_id}</b>\n${qaText}`);
        console.log("üì® –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram");
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –≤ Telegram:", safeStr(e));
      }

      // 4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Supabase
      try {
        await markCallProcessed(note_id, transcript, qa);
        console.log(`‚úÖ –ó–≤–æ–Ω–æ–∫ #${note_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π`);
      } catch (e) {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞:", safeStr(e));
      }
    }

    console.log("‚úÖ mainCycle –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ");
  } catch (e) {
    console.error("üí• –û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è mainCycle:", safeStr(e));
  }
}

// ====================== EXPRESS ROUTES ======================
app.get("/", (req, res) =>
  res.send("‚úÖ Smart AI Listener v3.2 —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ üöÄ")
);

app.post("/amo/force-scan", async (req, res) => {
  console.log("‚öôÔ∏è /amo/force-scan ‚Äî —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤");
  try {
    await mainCycle();
    res.json({ ok: true });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ force-scan:", err);
    res.status(500).json({ ok: false, error: err.message });
  }
});

app.get("/status", (req, res) => {
  res.json({
    ok: true,
    uptime: `${Math.round(process.uptime())}s`,
    next_poll_min: POLL_INTERVAL_MIN / 60000,
    env: {
      AMO_BASE_URL: process.env.AMO_BASE_URL,
      TG_CHAT_ID: process.env.TG_CHAT_ID,
      NODE_ENV: process.env.NODE_ENV,
    },
  });
});

// ====================== DEBUG ROUTE ======================
app.get("/amo/debug", async (req, res) => {
  try {
    const key = req.query.key;
    if (key !== process.env.CRM_SHARED_KEY)
      return res.status(403).json({ error: "Forbidden" });

    const tokens = await getAmoTokens();
    if (!tokens?.access_token)
      return res.status(401).json({ error: "No valid token" });

    const url = `${process.env.AMO_BASE_URL}/api/v4/leads/notes?filter[type]=call_in&limit=10`;
    const amoRes = await fetchWithTimeout(url, {
      headers: { Authorization: `Bearer ${tokens.access_token}` },
    });
    const json = await amoRes.json();

    const notes = json?._embedded?.notes || [];
    res.json({
      ok: true,
      count: notes.length,
      notes: notes.map((n) => ({
        id: n.id,
        entity_id: n.entity_id,
        created_at: n.created_at,
        link: n.params?.link || n.params?.LINK || null,
        type: n.note_type,
      })),
    });
  } catch (e) {
    console.error("‚ùå /amo/debug –æ—à–∏–±–∫–∞:", e);
    res.status(500).json({ ok: false, error: e.message });
  }
});

// ====================== SCHEDULER ======================
setInterval(() => {
  console.log("‚è∞ –ü–ª–∞–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ mainCycle()");
  mainCycle().catch(console.error);
}, POLL_INTERVAL_MIN);

// –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
mainCycle().catch(console.error);

// ====================== START SERVER ======================
app.listen(PORT, () => {
  console.log(`üöÄ Smart-AI-Listener v3.2 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
