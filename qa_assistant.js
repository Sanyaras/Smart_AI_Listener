// qa_assistant.js (v4.3-IRAZBIL) ‚Äî JSON-only QA + duration-aware scoring & robust render
// –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ —Å—Ö–µ–º–æ–π v4.1 (—Ç–æ—Ç –∂–µ JSON –Ω–∞ –≤—ã—Ö–æ–¥–µ), —É–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ total:
// - non-scoring: IVR-only –∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ (<15s) ‚Üí "–Ω–µ–æ—Ü–µ–Ω–æ—á–Ω—ã–π"
// - "service_short" (15‚Äì60s) ‚Üí –º—è–≥–∫–∞—è —à–∫–∞–ª–∞, –±–µ–∑ –∞–ª–µ—Ä—Ç–æ–≤
// - "sales" (‚â•60s) ‚Üí –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ (–Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –Ω–∞ 100), value/objections –≤–Ω–æ—Å—è—Ç –≤–∫–ª–∞–¥
// - "support" (‚â•60s) ‚Üí value/objections –Ω–µ —à—Ç—Ä–∞—Ñ—É—é—Ç (N/A), –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –Ω–∏—Ö
// –†–µ–Ω–¥–µ—Ä –≤ TG –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–Ω–µ–æ—Ü–µ–Ω–æ—á–Ω—ã–π" –≤–º–µ—Å—Ç–æ –±–∞–ª–ª–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ª—É—á–∞–µ–≤.

const OPENAI_API_KEY = process.env.OPENAI_API_KEY || "";
const CALL_QA_MODEL  = process.env.CALL_QA_MODEL  || "gpt-4.1-mini";

const MAX_TXT = 16000;
const OPENAI_TIMEOUT_MS  = parseInt(process.env.CALL_QA_TIMEOUT_MS || "60000", 10);
const OPENAI_MAX_RETRIES = parseInt(process.env.CALL_QA_RETRIES    || "2", 10);

// --------- Public API ---------
export async function analyzeTranscript(transcript, meta = {}) {
  if (!OPENAI_API_KEY) throw new Error("OPENAI_API_KEY is missing");
  if (!transcript || !transcript.trim()) throw new Error("Empty transcript");

  const t = transcript.length > MAX_TXT ? (transcript.slice(0, MAX_TXT) + "\n[...cut...]") : transcript;

  // ----- System -----
  const system = `
–í—ã ‚Äì AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ iRazbil (–ø—Ä–æ–¥–∞–∂–∞ –∏ —Ä–µ–º–æ–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Apple).
–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äì —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–∏—Ö).
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äì –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ—Ü–µ–Ω–∫—É –∑–≤–æ–Ω–∫–∞ –∏ –≤—ã–¥–∞—Ç—å –†–û–í–ù–û –æ–¥–∏–Ω JSON –ø–æ —Å—Ö–µ–º–µ.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–æ–ª–∏: manager (–º–µ–Ω–µ–¥–∂–µ—Ä), customer (–∫–ª–∏–µ–Ω—Ç), ivr (–∞–≤—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä). –†–∞–∑–±–µ–π—Ç–µ —Ä–µ–ø–ª–∏–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ ¬´quotes¬ª.
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ intent: "sales" (–ø—Ä–æ–¥–∞–∂–∞/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è) –∏–ª–∏ "support" (—Ä–µ–º–æ–Ω—Ç/–ø–æ–¥–¥–µ—Ä–∂–∫–∞). –ù–µ —à—Ç—Ä–∞—Ñ—É–π—Ç–µ –∑–∞ –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏.
‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏: greeting, rapport, needs, value, objection_handling, next_step, closing, clarity, compliance ‚Äî –≤ 0..10.
‚Ä¢ –î–∞–π—Ç–µ –ø—Å–∏—Ö–æ-—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∫—Ä–∞—Ç–∫–æ–µ summary –∏ action_items (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏).
‚Ä¢ –°—Ç—Ä–æ–≥–∏–π JSON: –ù–ò–ß–ï–ì–û, –∫—Ä–æ–º–µ –ø–æ–ª–µ–π —Å—Ö–µ–º—ã. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 0.0.

–°—Ö–µ–º–∞ JSON:
{
  "intent": "sales|support",
  "score": {
    "greeting": 0..10,
    "rapport": 0..10,
    "needs": 0..10,
    "value": 0..10,
    "objection_handling": 0..10,
    "next_step": 0..10,
    "closing": 0..10,
    "clarity": 0..10,
    "compliance": 0..10,
    "total": 0..100
  },
  "psycho_emotional": {
    "customer_sentiment": "string",
    "manager_tone": "string",
    "manager_empathy": "string",
    "stress_level": "string"
  },
  "techniques": {
    "greeting": "done well|partially|missed|N/A|short text",
    "rapport":   "...",
    "needs":     "...",
    "value":     "...",
    "objection_handling": "...",
    "next_step": "...",
    "closing":   "...",
    "clarity":   "...",
    "compliance":"..."
  },
  "quotes": [
    { "speaker": "manager|customer|ivr", "quote": "..." },
    { "speaker": "customer", "quote": "..." }
  ],
  "summary": "string (3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)",
  "action_items": ["...", "..."]
}

Edge-cases:
‚Ä¢ –ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç (–ø–æ—á—Ç–∏ –æ–¥–∏–Ω IVR –∏–ª–∏ 1-2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏) ‚Äî –≤—ã—Å—Ç–∞–≤–ª—è–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–¥–æ—Ü–µ–Ω–∫–∏, –Ω–æ —Ñ–æ—Ä–º–∞—Ç JSON —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ.
‚Ä¢ –ï—Å–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º ‚Äî ¬´N/A¬ª –≤ techniques –∏ –Ω–µ —Å–Ω–∏–∂–∞–π—Ç–µ total –∑–∞ –Ω–µ–≥–æ.
  `.trim();

  // ----- User -----
  const user = [
    meta.callId ? `CallID: ${meta.callId}` : null,
    meta.direction ? `direction: ${meta.direction}` : null,
    meta.from && meta.to ? `from: ${meta.from} -> to: ${meta.to}` : null,
    `brand: ${meta.brand || "iRazbil"}`,
    "",
    "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (–±–µ–∑ —É–∫–∞–∑–∞–Ω—ã—Ö –≥–æ–≤–æ—Ä—è—â–∏—Ö; —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª–µ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è):",
    t
  ].filter(Boolean).join("\n");

  const payload = {
    model: CALL_QA_MODEL,
    messages: [
      { role: "system", content: system },
      { role: "user", content: user }
    ],
    temperature: 0.0,
    response_format: { type: "json_object" }
  };

  const data = await callOpenAIChatWithRetry(payload, OPENAI_MAX_RETRIES, OPENAI_TIMEOUT_MS);
  const txt = data?.choices?.[0]?.message?.content || "";
  const clean = String(txt).trim().replace(/^```json\s*|\s*```$/g, "");

  let parsed;
  try {
    parsed = JSON.parse(clean);
  } catch {
    throw new Error("assistant returned non-JSON (schema violation)");
  }

  ensureSchemaShape(parsed);

  // ----- Duration-aware gating & weighted total -----
  const durSec = Number.isFinite(+meta.duration_sec) ? +meta.duration_sec : null;
  const gating = classifyCallType(transcript, durSec, parsed.intent, parsed.techniques);

  // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∞–±—Å–∫–æ—Ä –∏ —Å—á–∏—Ç–∞–µ–º total –ø–æ –≤–µ—Å–∞–º, —É—á–∏—Ç—ã–≤–∞—è gating
  normalizeSubscores(parsed);
  parsed.score.total = computeWeightedTotal(parsed, gating);

  sanitizeQuotes(parsed);
  return parsed;
}

export function formatQaForTelegram(qa) {
  const s = safe(qa);
  const sc = s.score || {};
  const pe = s.psycho_emotional || {};
  const tech = s.techniques || {};
  const quotes = Array.isArray(s.quotes) ? s.quotes.slice(0, 3) : [];

  const intentRu = toRuIntent(s.intent);
  const peCustomer = ruify(pe.customer_sentiment || "unknown");
  const peTone     = ruify(pe.manager_tone || "unknown");
  const peEmp      = ruify(pe.manager_empathy || "unknown");
  const peStress   = ruify(pe.stress_level || "unknown");

  // —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è "–Ω–µ–æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ" –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (total –º–æ–≥–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å 0, –Ω–æ –º—ã —è–≤–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è)
  const nonScoringDisplay =
    isIvrDominated(quotes, s.summary) ||
    isNonScoringByHeuristics(sc, tech);

  const head = nonScoringDisplay
    ? `‚Ä¢ –¢–∏–ø: <b>${esc(intentRu)}</b> ¬∑ <i>–Ω–µ–æ—Ü–µ–Ω–æ—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫</i>`
    : `‚Ä¢ –¢–∏–ø: <b>${esc(intentRu)}</b> ¬∑ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: <b>${num(sc.total)}</b>/100`;

  const lines = [
    "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–∞ (iRazbil v4.3)</b>",
    head,
    "",
    "üß† <b>–ü—Å–∏—Ö–æ-—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω</b>",
    `‚Ä¢ –ö–ª–∏–µ–Ω—Ç: <i>${esc(peCustomer)}</i>`,
    `‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: <i>${esc(peTone)}</i> ¬∑ –≠–º–ø–∞—Ç–∏—è: <i>${esc(peEmp)}</i> ¬∑ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: <i>${esc(peStress)}</i>`,
    "",
    "üß© <b>–¢–µ—Ö–Ω–∏–∫–∏ (–æ—Ü–µ–Ω–∫–∏ 0‚Äì10)</b>",
    `‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: <code>${num(sc.greeting)}</code> ¬∑ –†–∞–ø–ø–æ—Ä—Ç: <code>${num(sc.rapport)}</code> ¬∑ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: <code>${num(sc.needs)}</code> ¬∑ –¶–µ–Ω–Ω–æ—Å—Ç—å: <code>${num(sc.value)}</code>`,
    `‚Ä¢ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è: <code>${num(sc.objection_handling)}</code> ¬∑ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: <code>${num(sc.next_step)}</code> ¬∑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: <code>${num(sc.closing)}</code>`,
    `‚Ä¢ –Ø—Å–Ω–æ—Å—Ç—å: <code>${num(sc.clarity)}</code> ¬∑ –ö–æ–º–ø–ª–∞–µ–Ω—Å: <code>${num(sc.compliance)}</code>`,
    "",
    "üß© <b>–¢–µ—Ö–Ω–∏–∫–∏ (—Å—Ç–∞—Ç—É—Å)</b>",
    `‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: ${esc(ruify(tech.greeting || "-"))}`,
    `‚Ä¢ –†–∞–ø–ø–æ—Ä—Ç: ${esc(ruify(tech.rapport || "-"))}`,
    `‚Ä¢ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: ${esc(ruify(tech.needs || "-"))}`,
    `‚Ä¢ –¶–µ–Ω–Ω–æ—Å—Ç—å: ${esc(ruify(tech.value || "-"))}`,
    `‚Ä¢ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è: ${esc(ruify(tech.objection_handling || "-"))}`,
    `‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: ${esc(ruify(tech.next_step || "-"))}`,
    `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${esc(ruify(tech.closing || "-"))}`,
    `‚Ä¢ –Ø—Å–Ω–æ—Å—Ç—å: ${esc(ruify(tech.clarity || "-"))}`,
    `‚Ä¢ –ö–æ–º–ø–ª–∞–µ–Ω—Å: ${esc(ruify(tech.compliance || "-"))}`,
    "",
    quotes.length ? "üí¨ <b>–¶–∏—Ç–∞—Ç—ã</b>" : null,
    ...quotes.map(q => `‚Ä¢ <b>${roleRu(q.speaker || "?")}:</b> ‚Äú${esc(q.quote || "")}‚Äù`),
    "",
    s.summary ? `üìù <b>–ò—Ç–æ–≥</b>: ${esc(s.summary)}` : null,
    Array.isArray(s.action_items) && s.action_items.length
      ? ["üìå <b>–î–µ–π—Å—Ç–≤–∏—è</b>:", ...s.action_items.slice(0, 5).map(i => `‚Ä¢ ${esc(i)}`)].join("\n")
      : null
  ].filter(Boolean);

  return lines.join("\n");
}

export function makeSpoilerTranscript(roleLabeledText, maxChars = 4000) {
  const body = String(roleLabeledText || "").slice(0, maxChars);
  return body ? `üó£Ô∏è <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ)</b>\n||${esc(body)}||` : "";
}

// --------- Internal: OpenAI call with retry + timeout ---------
async function callOpenAIChatWithRetry(payload, retries, timeoutMs) {
  let lastError = null;
  for (let attempt = 0; attempt <= retries; attempt++) {
    const ac = new AbortController();
    const to = setTimeout(() => ac.abort(), timeoutMs);
    try {
      const r = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload),
        signal: ac.signal
      });
      clearTimeout(to);
      if (!r.ok) {
        const txt = await r.text().catch(() => "");
        throw new Error(`assistant http ${r.status}: ${txt}`);
      }
      return await r.json();
    } catch (e) {
      clearTimeout(to);
      lastError = e;
      if (attempt < retries) {
        const backoff = 300 * Math.pow(2, attempt);
        await sleep(backoff);
      }
    }
  }
  throw lastError || new Error("OpenAI call failed");
}

// ---------------- utils & scoring core ----------------
function sleep(ms) { return new Promise(res => setTimeout(res, ms)); }
function safe(x) { return (x && typeof x === "object") ? x : {}; }
function esc(s) { return String(s).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"); }
function num(n) { return (typeof n === "number" && Number.isFinite(n)) ? n : "-"; }

function clamp10(n) {
  const v = Number.isFinite(+n) ? +n : 0;
  return Math.max(0, Math.min(10, v));
}

function ensureSchemaShape(obj) {
  obj.intent ??= "unknown";
  obj.score ??= {};
  const sc = obj.score;
  sc.greeting ??= 0;
  sc.rapport ??= 0;
  sc.needs ??= 0;
  sc.value ??= 0;
  sc.objection_handling ??= 0;
  sc.next_step ??= 0;
  sc.closing ??= 0;
  sc.clarity ??= 0;
  sc.compliance ??= 0;
  sc.total ??= 0;

  obj.psycho_emotional ??= {
    customer_sentiment: "unknown",
    manager_tone: "unknown",
    manager_empathy: "unknown",
    stress_level: "unknown"
  };
  obj.techniques ??= {
    greeting: "unknown",
    rapport: "unknown",
    needs: "unknown",
    value: "unknown",
    objection_handling: "unknown",
    next_step: "unknown",
    closing: "unknown",
    clarity: "unknown",
    compliance: "unknown"
  };
  if (!Array.isArray(obj.quotes)) obj.quotes = [];
  obj.summary ??= "unknown";
  if (!Array.isArray(obj.action_items)) obj.action_items = [];
}

function normalizeSubscores(obj) {
  const sc = obj.score || {};
  sc.greeting = clamp10(sc.greeting);
  sc.rapport  = clamp10(sc.rapport);
  sc.needs    = clamp10(sc.needs);
  sc.value    = clamp10(sc.value);
  sc.objection_handling = clamp10(sc.objection_handling);
  sc.next_step = clamp10(sc.next_step);
  sc.closing   = clamp10(sc.closing);
  sc.clarity   = clamp10(sc.clarity);
  sc.compliance= clamp10(sc.compliance);
}

function classifyCallType(transcript, durSec, intentRaw, tech) {
  const intent = String(intentRaw || "").toLowerCase();
  const dur = Number.isFinite(+durSec) ? +durSec : null;

  const ivrOnly = isIvrDominatedText(transcript);
  if (ivrOnly || (dur !== null && dur < 15)) return { kind: "na" }; // –Ω–µ–æ—Ü–µ–Ω–æ—á–Ω—ã–π

  if (dur !== null && dur < 60) {
    // –∫–æ—Ä–æ—Ç–∫–∏–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π ¬´–∏–Ω—Ñ–æ–∑–≤–æ–Ω–æ–∫¬ª
    return { kind: "service_short" };
  }

  // –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ
  if (intent === "sales")   return { kind: "sales" };
  if (intent === "support") return { kind: "support" };

  return { kind: "support" };
}

function computeWeightedTotal(obj, gating) {
  const sc = obj.score || {};
  const tech = obj.techniques || {};
  const kind = gating?.kind || "support";

  // non-scoring: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ¬´–Ω–µ–æ—Ü–µ–Ω–æ—á–Ω—ã–π¬ª; –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–Ω—ë–º 0
  if (kind === "na") return 0;

  // –ú—è–≥–∫–∞—è —à–∫–∞–ª–∞ –¥–ª—è service_short: –Ω–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞ ¬´–æ–∂–∏–¥–∞–µ–º–æ–µ¬ª
  if (kind === "service_short") {
    // —É—á–∏—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ: greeting, needs, clarity, compliance, next_step, closing —Å–ª–µ–≥–∫–∞
    const weights = {
      greeting:  5,
      rapport:   5,
      needs:     25,
      value:     0,  // N/A
      objection_handling: 0, // N/A
      next_step: 25,
      closing:   10,
      clarity:   20,
      compliance:10,
    };
    const { total, max } = weightedSum(sc, weights);
    // –º—è–≥–∫–∞—è —à–∫–∞–ª–∞ ‚Äî –≤–µ—Ä—Ö–Ω–∏–π –∫–∞–ø ~60
    const score = Math.round((total / max) * 60);
    return clamp100(score);
  }

  // –ü–æ–ª–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
  if (kind === "sales") {
    // –í–µ—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂ (—Å—É–º–º–∞ 100)
    const weights = {
      greeting:  3,
      rapport:   10,
      needs:     25,
      value:     20,
      objection_handling: 15,
      next_step: 20,
      closing:   5,
      clarity:   2,
      compliance:0
    };
    const { total, max } = weightedSum(sc, weights);
    return clamp100(Math.round((total / max) * 100));
  }

  // support (–ø–æ–ª–Ω—ã–π): value/objections –Ω–µ —à—Ç—Ä–∞—Ñ—É—é—Ç (–µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ N/A)
  const valueNA = isNA(tech.value);
  const objNA   = isNA(tech.objection_handling);

  const weightsSupportBase = {
    greeting:  4,
    rapport:   10,
    needs:     30,
    value:     valueNA ? 0 : 10,
    objection_handling: objNA ? 0 : 10,
    next_step: 20,
    closing:   8,
    clarity:   6,
    compliance:12
  };
  const { total, max } = weightedSum(sc, weightsSupportBase);
  return clamp100(Math.round((total / max) * 100));
}

function weightedSum(sc, weights) {
  let total = 0, max = 0;
  for (const [k, w] of Object.entries(weights)) {
    const ww = Number.isFinite(+w) ? +w : 0;
    if (ww <= 0) continue;
    total += (clamp10(sc[k]) / 10) * ww;
    max   += ww;
  }
  return { total, max: Math.max(1, max) };
}

function clamp100(n) { return Math.max(0, Math.min(100, Number.isFinite(+n) ? +n : 0)); }

function isNA(text) {
  const s = String(text || "").toLowerCase();
  return s.includes("n/a") || s.includes("–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ") || s.includes("na");
}

function sanitizeQuotes(obj) {
  if (!Array.isArray(obj.quotes)) { obj.quotes = []; return; }
  const mapRole = (r) => {
    const s = String(r || "").toLowerCase();
    if (s.includes("manager") || s.includes("–º–µ–Ω–µ–¥–∂")) return "manager";
    if (s.includes("customer") || s.includes("client") || s.includes("–∫–ª–∏–µ–Ω—Ç")) return "customer";
    if (s.includes("ivr") || s.includes("auto") || s.includes("–∞–≤—Ç–æ")) return "ivr";
    return "customer";
  };
  obj.quotes = obj.quotes
    .map(q => ({ speaker: mapRole(q?.speaker), quote: String(q?.quote || "").trim() }))
    .filter(q => q.quote.length > 0)
    .slice(0, 5);
}

// --------- IVR / non-scoring helpers ----------
function isIvrDominatedText(transcript) {
  const s = String(transcript || "").toLowerCase();
  // —á–∞—Å—Ç—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã IVR/–∑–≤–æ–Ω–∫–∞
  const ivrHints = [
    "–Ω–∞–∂–º–∏—Ç–µ 1", "–Ω–∞–∂–º–∏—Ç–µ –æ–¥–∏–Ω", "–Ω–∞–∂–º–∏—Ç–µ 2", "–Ω–∞–∂–º–∏—Ç–µ –¥–≤–∞",
    "–æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ –ª–∏–Ω–∏–∏", "–≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
    "–∑–≤–æ–Ω–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω", "ivr:", "–∞–≤—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä"
  ];
  let hits = 0;
  for (const h of ivrHints) if (s.includes(h)) hits++;
  // –µ—Å–ª–∏ –ø–æ—á—Ç–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ IVR/¬´–∑–≤–æ–Ω–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω¬ª, —Å—á–∏—Ç–∞–µ–º non-scoring
  return hits >= 2 && s.replace(/ivr:|–∑–≤–æ–Ω–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω|[^\w]+/g, "").length < 800;
}

function isIvrDominated(quotes, summary) {
  const qs = (quotes || []).map(q => (q.speaker||"") + ":" + (q.quote||"")).join("\n").toLowerCase();
  const sum = String(summary||"").toLowerCase();
  return /ivr|–∞–≤—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä/.test(qs) && /ivr|–∞–≤—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä/.test(sum);
}

function isNonScoringByHeuristics(sc, tech) {
  // –∫—Ä–∞–π–Ω–µ –Ω–∏–∑–∫–∏–µ –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ + value/objections N/A ‚Üí –≤–µ—Ä–æ—è—Ç–Ω–æ, –∫–æ—Ä–æ—Ç–∫–∏–π/—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫
  const vals = [
    sc.greeting, sc.rapport, sc.needs, sc.next_step,
    sc.closing, sc.clarity, sc.compliance
  ].map(v => Number.isFinite(+v) ? +v : 0);
  const veryLow = vals.filter(v => v <= 3).length >= 6;
  return veryLow;
}

// -------------- –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è/—Ä—É—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä --------------
function toRuIntent(intent) {
  const s = String(intent || "").toLowerCase();
  if (s === "sales") return "–ø—Ä–æ–¥–∞–∂–∞";
  if (s === "support") return "–ø–æ–¥–¥–µ—Ä–∂–∫–∞/—Ä–µ–º–æ–Ω—Ç";
  if (s === "ivr") return "IVR/–º–µ–Ω—é";
  if (s === "noise") return "—à—É–º/–Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ";
  return s || "unknown";
}
function roleRu(speaker) {
  const s = String(speaker || "").toLowerCase();
  if (s.includes("manager")) return "–º–µ–Ω–µ–¥–∂–µ—Ä";
  if (s.includes("customer")) return "–∫–ª–∏–µ–Ω—Ç";
  if (s.includes("ivr")) return "–∞–≤—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä";
  return "–≥–æ–≤–æ—Ä—è—â–∏–π";
}
function ruify(text) {
  const s = String(text || "").trim();
  const map = [
    [/^done\s*well$/i, "—Ö–æ—Ä–æ—à–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"],
    [/^partially$/i, "—á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"],
    [/^missed$/i, "–ø—Ä–æ–ø—É—â–µ–Ω–æ"],
    [/^n\/?a$/i, "–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ"],
    [/^polite$/i, "–≤–µ–∂–ª–∏–≤—ã–π"],
    [/^calm$/i, "—Å–ø–æ–∫–æ–π–Ω—ã–π"],
    [/^professional$/i, "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"],
    [/^impatient/i, "–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π"],
    [/^frustrat/i, "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ/—Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è"],
    [/^neutral$/i, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"],
    [/^negative$/i, "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π"],
    [/^positive$/i, "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π"],
    [/^low$/i, "–Ω–∏–∑–∫–∏–π"],
    [/^moderate$/i, "—É–º–µ—Ä–µ–Ω–Ω—ã–π"],
    [/^high$/i, "–≤—ã—Å–æ–∫–∏–π"],
  ];
  for (const [re, rep] of map) if (re.test(s)) return rep;
  const lower = s.toLowerCase();
  if (lower.includes("impatient") && lower.includes("polite")) return "–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π, –Ω–æ –≤–µ–∂–ª–∏–≤—ã–π";
  if (lower.includes("calm") && lower.includes("professional")) return "—Å–ø–æ–∫–æ–π–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π";
  return s;
}
