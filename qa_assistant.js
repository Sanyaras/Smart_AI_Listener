// qa_assistant.js
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || "";
const CALL_QA_MODEL  = process.env.CALL_QA_MODEL  || "gpt-4.1-mini";

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —É–ø–∏—Ä–∞—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã –º–æ–¥–µ–ª–∏
const MAX_TXT = 16000;

/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞ ¬´–≥–ª–∞–∑–∞–º–∏ –†–û–ü–∞¬ª.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–¢–†–û–ì–ò–ô JSON —Å –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π, –ø—Å–∏—Ö–æ-—Å—Ä–µ–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
 */
export async function analyzeTranscript(transcript, meta = {}) {
  if (!OPENAI_API_KEY) throw new Error("OPENAI_API_KEY is missing");
  if (!transcript || !transcript.trim()) throw new Error("Empty transcript");

  const t = transcript.length > MAX_TXT ? (transcript.slice(0, MAX_TXT) + "\n[...cut...]") : transcript;

  const system = [
    "–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∏ –æ–ø—ã—Ç–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ (–†–û–ü).",
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –õ–Æ–ë–û–ô —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ (–ø—Ä–æ–¥–∞–∂–∏/—Å–∞–ø–ø–æ—Ä—Ç/–ª–æ–≥–∏—Å—Ç–∏–∫–∞/–∂–∞–ª–æ–±–∞/–¥—Ä—É–≥–æ–µ) –∏ –≤—ã–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ü–µ–Ω–∫—É.",
    "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ñ–Å–°–¢–ö–û–ì–û JSON (–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON).",
    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ä–æ–≤–Ω–æ —Ç–∞–∫–∞—è:",
    "{",
    '  "meta": { "language": "ru|en|...", "intent": "sales|support|delivery|complaint|admin|other", "stage": "first_contact|follow_up|closing|post_sale|other", "outcome": "success|callback_scheduled|info_sent|refusal|no_answer|other" },',
    '  "psycho": { "customer_sentiment": -3, "manager_tone": -3, "empathy": 0, "tension": 0, "trust_signals": [], "stress_markers": [], "escalate_flag": false, "notes": "" },',
    '  "technique": {',
    '    "greeting": 0, "intro": 0, "rapport": 0, "needs": 0, "qualification": 0,',
    '    "value": 0, "objection_handling": 0, "next_step": 0, "closing": 0, "clarity": 0, "compliance": 0',
    "  },",
    '  "kpis": { "estimated_talk_ratio_manager_percent": 0, "interruptions_count": 0, "callbacks_promised": 0, "followups_committed": 0 },',
    '  "risks": [],',
    '  "best_quotes": { "value_proposition": "", "objection": "", "closing": "" },',
    '  "action_items": [ { "owner":"manager|rop", "item":"", "due":"ASAP|date" } ],',
    '  "training_recommendations": [],',
    '  "score": {',
    '    "rubric": "rop-v1",',
    '    "weights": { "psycho": 25, "needs": 15, "value": 15, "objections": 15, "next_step": 15, "compliance": 5, "clarity": 5, "rapport": 5 },',
    '    "per_dimension": { "psycho": 0, "needs": 0, "value": 0, "objections": 0, "next_step": 0, "compliance": 0, "clarity": 0, "rapport": 0 },',
    '    "total": 0',
    "  },",
    '  "suggestions": { "one_line_coach_tip": "", "detailed": "" }',
    "}",
    "",
    "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ü–µ–Ω–∫–∏:",
    "- customer_sentiment / manager_tone: –æ—Ç -3 (–æ—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ) –¥–æ +3 (–æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ).",
    "- empathy, tension: 0..3.",
    "- technique: greeting/intro 0..1; rapport 0..2; needs 0..3; qualification 0..2; value 0..3; objection_handling 0..2; next_step 0..2; closing 0..2; clarity 0..2; compliance 0..2.",
    "- per_dimension –∏ total: 0..100. Total ‚Äî –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ weights (–æ–∫—Ä—É–≥–ª—è–π –¥–æ —Ü–µ–ª–æ–≥–æ).",
    "- language ‚Äî —è–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞; –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö.",
    "- –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –ù–ï –ø—Ä–æ–¥–∞–∂–∞ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–π intent –∏ –æ—Ü–µ–Ω–∏–≤–∞–π –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–Ω–µ –Ω–∞–∫–∞–∑—ã–≤–∞–π –∑–∞ ¬´–Ω–µ—Ç –£–¢–ü¬ª, –µ—Å–ª–∏ —ç—Ç–æ —Å–∞–ø–ø–æ—Ä—Ç).",
    "- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–π actionable —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å/—Å–¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑."
  ].join("\n");

  const user = [
    meta.callId ? `CallID: ${meta.callId}` : null,
    meta.ext ? `ext: ${meta.ext}` : null,
    meta.direction ? `direction: ${meta.direction}` : null,
    meta.from && meta.to ? `from: ${meta.from} -> to: ${meta.to}` : null,
    meta.brand ? `brand: ${meta.brand}` : null,
    "",
    "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (—Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ —Ä–æ–ª–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ):",
    t
  ].filter(Boolean).join("\n");

  const payload = {
    model: CALL_QA_MODEL,
    messages: [
      { role: "system", content: system },
      { role: "user", content: user }
    ],
    temperature: 0.2,
    // –ø—Ä–æ—Å–∏–º JSON ¬´–∂–µ—Å—Ç–∫–æ¬ª
    response_format: { type: "json_object" }
  };

  const r = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${OPENAI_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify(payload)
  });

  if (!r.ok) {
    const t = await r.text().catch(() => "");
    throw new Error(`assistant http ${r.status}: ${t}`);
  }
  const data = await r.json();
  const txt = data?.choices?.[0]?.message?.content || "";

  // –ü–∞—Ä—Å–∏–º JSON (–∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–æ–¥–±–ª–æ–∫–∞–º–∏ ‚Äî —É–±–∏—Ä–∞–µ–º)
  const clean = String(txt).trim().replace(/^```json\s*|\s*```$/g, "");
  let parsed;
  try {
    parsed = JSON.parse(clean);
  } catch (e) {
    throw new Error("assistant returned non-JSON: " + (txt?.slice(0, 600) || ""));
  }
  return parsed;
}

export function formatQaForTelegram(qa) {
  const s = safe(qa);
  const dim = s.score?.per_dimension || {};
  const psycho = s.psycho || {};
  const meta = s.meta || {};

  const emo = (n) => (n <= -2 ? "üî¥" : n < 0 ? "üü†" : n === 0 ? "üü°" : n <= 2 ? "üü¢" : "üü£");

  const lines = [
    "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–∞ (–†–û–ü)</b>",
    meta.intent ? `‚Ä¢ –¢–∏–ø: <b>${esc(meta.intent)}</b> ¬∑ –°—Ç–∞–¥–∏—è: <b>${esc(meta.stage||"-")}</b>` : null,
    meta.outcome ? `‚Ä¢ –ò—Ç–æ–≥: <b>${esc(meta.outcome)}</b>` : null,
    "",
    "üß† <b>–ü—Å–∏—Ö–æ-—Å—Ä–µ–∑</b>",
    `‚Ä¢ –ö–ª–∏–µ–Ω—Ç: ${emo(psycho.customer_sentiment ?? 0)} <code>${psycho.customer_sentiment ?? 0}</code> ¬∑ –¢–æ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${emo(psycho.manager_tone ?? 0)} <code>${psycho.manager_tone ?? 0}</code>`,
    `‚Ä¢ –≠–º–ø–∞—Ç–∏—è: <code>${psycho.empathy ?? 0}</code> ¬∑ –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: <code>${psycho.tension ?? 0}</code> ¬∑ –≠—Å–∫–∞–ª–∞—Ü–∏—è: <code>${psycho.escalate_flag ? "–¥–∞" : "–Ω–µ—Ç"}</code>`,
    psycho.notes ? `‚Ä¢ –ó–∞–º–µ—Ç–∫–∏: <i>${esc(psycho.notes)}</i>` : null,
    "",
    "üß© <b>–¢–µ—Ö–Ω–∏–∫–∞</b>",
    `‚Ä¢ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: <code>${s.technique?.needs ?? "-"}</code> ¬∑ –£–¢–ü: <code>${s.technique?.value ?? "-"}</code> ¬∑ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è: <code>${s.technique?.objection_handling ?? "-"}</code>`,
    `‚Ä¢ –°–ª–µ–¥. —à–∞–≥: <code>${s.technique?.next_step ?? "-"}</code> ¬∑ –ó–∞–∫—Ä—ã—Ç–∏–µ: <code>${s.technique?.closing ?? "-"}</code>`,
    `‚Ä¢ –†–∞–ø–ø–æ—Ä—Ç: <code>${s.technique?.rapport ?? "-"}</code> ¬∑ –ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å: <code>${s.technique?.clarity ?? "-"}</code>`,
    "",
    "üìà <b>–û—Ü–µ–Ω–∫–∏ (0‚Äì100)</b>",
    `‚Ä¢ Psycho: <code>${dim.psycho ?? "-"}</code> ¬∑ Needs: <code>${dim.needs ?? "-"}</code> ¬∑ Value: <code>${dim.value ?? "-"}</code> ¬∑ Obj: <code>${dim.objections ?? "-"}</code>`,
    `‚Ä¢ Next: <code>${dim.next_step ?? "-"}</code> ¬∑ Rapport: <code>${dim.rapport ?? "-"}</code> ¬∑ Clarity: <code>${dim.clarity ?? "-"}</code> ¬∑ Compliance: <code>${dim.compliance ?? "-"}</code>`,
    "",
    s.score?.total !== undefined ? `‚≠êÔ∏è <b>Total:</b> <b>${s.score.total}</b>/100 (rubric ${esc(s.score.rubric || "v1")})` : null,
    "",
    s.suggestions?.one_line_coach_tip ? `üéØ <b>–°–æ–≤–µ—Ç:</b> ${esc(s.suggestions.one_line_coach_tip)}` : null,
    s.suggestions?.detailed ? `üõ† <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n${esc(s.suggestions.detailed)}` : null,
    "",
    (s.risks && s.risks.length) ? "‚ö†Ô∏è <b>–†–∏—Å–∫–∏:</b>\n‚Ä¢ " + s.risks.map(esc).join("\n‚Ä¢ ") : null,
    (s.action_items && s.action_items.length) ? "\nüìù <b>Action items:</b>\n" + s.action_items.map(a => `‚Ä¢ <i>${esc(a.owner||"manager")}</i>: ${esc(a.item||"")} (${esc(a.due||"ASAP")})`).join("\n") : null
  ].filter(Boolean);

  return lines.join("\n");
}

function safe(x) { return (x && typeof x === "object") ? x : {}; }
function esc(s) { return String(s).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"); }
