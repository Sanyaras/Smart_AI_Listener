// qa_assistant.js (v4.3-IRAZBIL-ru, refreshed)
// ‚Äî –°—Ç—Ä–æ–≥–∏–π JSON –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ (intent/score/psycho_emotional/techniques/quotes/summary/action_items)
// ‚Äî –î–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º: temperature=0, response_format=json_object
// ‚Äî –†–µ—Ç—Ä–∞–∏ + —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—ã–∑–æ–≤ OpenAI
// ‚Äî –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è 0..10 –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π total (–Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ N/A/–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –ø–æ intent)
// ‚Äî –†—É—Å—Å–∫–∏–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è Telegram (formatQaForTelegram) + –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–æ–π–ª–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
// ‚Äî –ê–¥–∞–ø—Ç–µ—Ä runQAOnTranscript(asr) –¥–ª—è queue_worker.js

import { sendTG } from "./telegram.js";

// -------- ENV --------
const OPENAI_API_KEY     = process.env.OPENAI_API_KEY || "";
const CALL_QA_MODEL      = process.env.CALL_QA_MODEL  || "gpt-4.1-mini";
const OPENAI_TIMEOUT_MS  = parseInt(process.env.CALL_QA_TIMEOUT_MS || "60000", 10);
const OPENAI_MAX_RETRIES = parseInt(process.env.CALL_QA_RETRIES    || "2", 10);

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–≤–µ—Ä—Ö–¥–ª–∏–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤)
const MAX_TXT = 16000;

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç:
 * {
 *   intent: "sales"|"support",
 *   score: { greeting, rapport, needs, value, objection_handling, next_step, closing, clarity, compliance, total },
 *   psycho_emotional: { customer_sentiment, manager_tone, manager_empathy, stress_level },
 *   techniques: { greeting, rapport, needs, value, objection_handling, next_step, closing, clarity, compliance },
 *   quotes: [{ speaker: "manager"|"customer"|"ivr", quote: string }, ...],
 *   summary: string,
 *   action_items: string[]
 * }
 */
export async function analyzeTranscript(transcript, meta = {}) {
  if (!OPENAI_API_KEY) throw new Error("OPENAI_API_KEY is missing");
  if (!transcript || !transcript.trim()) throw new Error("Empty transcript");

  const t = transcript.length > MAX_TXT
    ? (transcript.slice(0, MAX_TXT) + "\n[...cut...]")
    : transcript;

  // ---------- System prompt ----------
  const system = `
–í—ã ‚Äì AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ iRazbil (–ø—Ä–æ–¥–∞–∂–∞ –∏ —Ä–µ–º–æ–Ω—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤).
–í—Ö–æ–¥: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–∏—Ö.
–ó–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –æ—Ü–µ–Ω–∫—É –∑–≤–æ–Ω–∫–∞ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π —Ä–æ–ª–µ–π –∏ –≤—ã–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–æ–ª–∏: manager (–º–µ–Ω–µ–¥–∂–µ—Ä), customer (–∫–ª–∏–µ–Ω—Ç), ivr (–∞–≤—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä). –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ä–µ—á—å –ø–æ —Ä–æ–ª—è–º.
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ (intent): "sales" (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞) –∏–ª–∏ "support" (—Ä–µ–º–æ–Ω—Ç/–ø–æ–¥–¥–µ—Ä–∂–∫–∞).
‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ (0..10): greeting, rapport, needs, value, objection_handling, next_step, closing, clarity, compliance.
‚Ä¢ –ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Ç–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —ç–º–ø–∞—Ç–∏—è, —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞.
‚Ä¢ 2‚Äì5 —Ü–∏—Ç–∞—Ç: speaker + quote.
‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ summary (3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).
‚Ä¢ –°–ø–∏—Å–æ–∫ action_items (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏).

–í–ê–ñ–ù–û:
‚Ä¢ –û—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥.
‚Ä¢ –§–æ—Ä–º–∞ –∏ –∫–ª—é—á–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã (—Å–º. —Å—Ö–µ–º—É). –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –ø–æ–ª—è.
‚Ä¢ –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "unknown" –∏–ª–∏ null (—Å–æ—Ö—Ä–∞–Ω—è—è —Ç–∏–ø).
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = 0.0 (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º).
‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π total = 0..100. –ù–ï –®–¢–†–ê–§–£–ô–¢–ï –∑–∞ –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "value" –¥–ª—è —á–∏—Å—Ç–æ–≥–æ support): –ø–æ–º–µ—á–∞–π—Ç–µ —Ç–∞–∫–∏–µ –∫–∞–∫ "N/A"/"–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ" –≤ techniques –∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤ total.

–°—Ö–µ–º–∞:
{
  "intent": "sales"|"support",
  "score": {
    "greeting": number, "rapport": number, "needs": number, "value": number,
    "objection_handling": number, "next_step": number, "closing": number,
    "clarity": number, "compliance": number, "total": number
  },
  "psycho_emotional": {
    "customer_sentiment": string, "manager_tone": string,
    "manager_empathy": string, "stress_level": string
  },
  "techniques": {
    "greeting": string, "rapport": string, "needs": string, "value": string,
    "objection_handling": string, "next_step": string, "closing": string,
    "clarity": string, "compliance": string
  },
  "quotes": [{ "speaker": "manager"|"customer"|"ivr", "quote": string }],
  "summary": string,
  "action_items": [string]
}

Anchors (–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞):
- –°–ª–∞–±—ã–π: greeting 0, rapport 0, needs 1, value 0, objections 0, next 0, closing 0, clarity 1, compliance 0; total ~5/100.
- –°—Ä–µ–¥–Ω–∏–π (support): greeting 3, rapport 3, needs 4, value N/A, objections N/A/5, next 5, closing 4, clarity 5, compliance 5; total ~80/100.
- –°–∏–ª—å–Ω—ã–π (sales): –ø–æ—á—Ç–∏ –≤—Å—ë ~5/5 ‚Üí total ~100/100.

Edge cases:
- –ü—É—Å—Ç–æ/—Ç–æ–ª—å–∫–æ IVR ‚Üí intent "support", –≤—Å–µ 0, —Ü–∏—Ç–∞—Ç—ã –ø—É—Å—Ç—ã–µ, summary –ø–æ—è—Å–Ω—è–µ—Ç –Ω–µ—Ö–≤–∞—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, action_items: ["–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"].
- –ê–≥—Ä–µ—Å—Å–∏—è/–±—Ä–∞–Ω—å ‚Äî –æ—Ç—Ä–∞–∑–∏—Ç—å –≤ psycho_emotional.
`.trim();

  // ---------- User prompt ----------
  const exampleUserIntro = `
–ü—Ä–∏–º–µ—Ä –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –ø–æ–∑–≤–æ–Ω–∏–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏—é iRazbil. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...
–ê–ª–ª–æ, —É –º–µ–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω —Å–ª–æ–º–∞–ª—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?
–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–µ–Ω–µ–¥–∂–µ—Ä iRazbil, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?
... (–¥–∞–ª–µ–µ –∏–¥—ë—Ç –¥–∏–∞–ª–æ–≥) ...
`.trim();

  const user = [
    meta.callId ? `CallID: ${meta.callId}` : null,
    meta.direction ? `direction: ${meta.direction}` : null,
    meta.from && meta.to ? `from: ${meta.from} -> to: ${meta.to}` : null,
    meta.brand ? `brand: ${meta.brand}` : "brand: iRazbil",
    "",
    exampleUserIntro,
    "",
    "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (–±–µ–∑ —Ä–æ–ª–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ç–∫–∞):",
    t
  ].filter(Boolean).join("\n");

  // ---------- OpenAI call ----------
  const payload = {
    model: CALL_QA_MODEL,
    messages: [
      { role: "system", content: system },
      { role: "user", content: user }
    ],
    temperature: 0.0,
    response_format: { type: "json_object" }
  };

  const data = await callOpenAIChatWithRetry(payload, OPENAI_MAX_RETRIES, OPENAI_TIMEOUT_MS);
  const txt  = data?.choices?.[0]?.message?.content || "";
  const clean = String(txt).trim().replace(/^```json\s*|\s*```$/g, "");

  let parsed;
  try {
    parsed = JSON.parse(clean);
  } catch {
    throw new Error("assistant returned non-JSON (schema violation)");
  }

  ensureSchemaShape(parsed);
  normalizeScoresAndTotal(parsed);
  sanitizeQuotes(parsed);

  return parsed;
}

/* =================== Telegram render =================== */
export function formatQaForTelegram(qa) {
  const s   = safe(qa);
  const sc  = s.score || {};
  const pe  = s.psycho_emotional || {};
  const tch = s.techniques || {};
  const qts = Array.isArray(s.quotes) ? s.quotes.slice(0, 3) : [];

  const lines = [
    "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–∞ (iRazbil)</b>",
    `‚Ä¢ –¢–∏–ø: <b>${esc(toRuIntent(s.intent))}</b> ¬∑ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: <b>${num(sc.total)}</b>/100`,
    "",
    "üß† <b>–ü—Å–∏—Ö–æ-—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω</b>",
    `‚Ä¢ –ö–ª–∏–µ–Ω—Ç: <i>${esc(ruify(pe.customer_sentiment || "unknown"))}</i>`,
    `‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: <i>${esc(ruify(pe.manager_tone || "unknown"))}</i> ¬∑ –≠–º–ø–∞—Ç–∏—è: <i>${esc(ruify(pe.manager_empathy || "unknown"))}</i> ¬∑ –°—Ç—Ä–µ—Å—Å: <i>${esc(ruify(pe.stress_level || "unknown"))}</i>`,
    "",
    "üß© <b>–¢–µ—Ö–Ω–∏–∫–∏ (0‚Äì10)</b>",
    `‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: <code>${num(sc.greeting)}</code> ¬∑ –†–∞–ø–ø–æ—Ä—Ç: <code>${num(sc.rapport)}</code> ¬∑ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: <code>${num(sc.needs)}</code> ¬∑ –¶–µ–Ω–Ω–æ—Å—Ç—å: <code>${num(sc.value)}</code>`,
    `‚Ä¢ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è: <code>${num(sc.objection_handling)}</code> ¬∑ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: <code>${num(sc.next_step)}</code> ¬∑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: <code>${num(sc.closing)}</code>`,
    `‚Ä¢ –Ø—Å–Ω–æ—Å—Ç—å: <code>${num(sc.clarity)}</code> ¬∑ –ö–æ–º–ø–ª–∞–µ–Ω—Å: <code>${num(sc.compliance)}</code>`,
    "",
    qts.length ? "üí¨ <b>–¶–∏—Ç–∞—Ç—ã</b>" : null,
    ...qts.map(q => `‚Ä¢ <b>${roleRu(q.speaker)}:</b> ‚Äú${esc(q.quote)}‚Äù`),
    "",
    s.summary ? `üìù <b>–ò—Ç–æ–≥</b>: ${esc(s.summary)}` : null,
    Array.isArray(s.action_items) && s.action_items.length
      ? ["üìå <b>–î–µ–π—Å—Ç–≤–∏—è</b>:", ...s.action_items.slice(0, 5).map(i => `‚Ä¢ ${esc(i)}`)].join("\n")
      : null
  ].filter(Boolean);

  return lines.join("\n");
}

export function makeSpoilerTranscript(roleLabeledText, maxChars = 4000) {
  const body = String(roleLabeledText || "").slice(0, maxChars);
  return body ? `üó£Ô∏è <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ)</b>\n||${esc(body)}||` : "";
}

/* =================== Adapter for queue_worker =================== */
/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –ø–æ–¥ —Ç–µ–∫—É—â–∏–π –ø–∞–π–ø–ª–∞–π–Ω:
 * –≤—Ö–æ–¥: { text, sourceUrl?, amoNoteKey? }
 * –≤—ã—Ö–æ–¥: { score, issues[], summary, raw }
 */
export async function runQAOnTranscript(asr) {
  try {
    const txt  = asr?.text || "";
    const meta = {
      callId:    asr?.amoNoteKey || undefined,
      sourceUrl: asr?.sourceUrl  || undefined
    };

    const raw = await analyzeTranscript(txt, meta);
    const total  = Number(raw?.score?.total ?? 0);
    const issues = Array.isArray(raw?.action_items) ? raw.action_items.slice(0, 6) : [];

    return { score: total, issues, summary: String(raw?.summary || ""), raw };
  } catch (e) {
    // –ù–µ –ø–∞–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º ‚Äî –º—è–≥–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ TG –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º stub
    try { await sendTG(`‚ö†Ô∏è QA –æ—à–∏–±–∫–∞: <code>${esc(String(e))}</code>`); } catch {}
    return { score: 0, issues: ["–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏"], summary: String(e), raw: null };
  }
}

/* =================== OpenAI: retry + timeout =================== */
async function callOpenAIChatWithRetry(payload, retries, timeoutMs) {
  let lastError = null;
  for (let attempt = 0; attempt <= retries; attempt++) {
    const ac = new AbortController();
    const to = setTimeout(() => ac.abort(), timeoutMs);
    try {
      const r = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload),
        signal: ac.signal
      });
      clearTimeout(to);
      if (!r.ok) {
        const txt = await r.text().catch(() => "");
        throw new Error(`assistant http ${r.status}: ${txt}`);
      }
      return await r.json();
    } catch (e) {
      clearTimeout(to);
      lastError = e;
      if (attempt < retries) await sleep(300 * Math.pow(2, attempt));
    }
  }
  throw lastError || new Error("OpenAI call failed");
}

/* =================== Utils / schema helpers =================== */
function sleep(ms){ return new Promise(res => setTimeout(res, ms)); }
function safe(x){ return (x && typeof x === "object") ? x : {}; }
function esc(s){ return String(s).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"); }
function num(n){ return (typeof n === "number" && Number.isFinite(n)) ? n : "-"; }
function clamp10(n){ const v = Number.isFinite(+n) ? +n : 0; return Math.max(0, Math.min(10, v)); }

function ensureSchemaShape(obj){
  obj.intent ??= "unknown";
  obj.score ??= {};
  const sc = obj.score;
  for (const k of ["greeting","rapport","needs","value","objection_handling","next_step","closing","clarity","compliance","total"]) sc[k] ??= 0;

  obj.psycho_emotional ??= {
    customer_sentiment: "unknown",
    manager_tone: "unknown",
    manager_empathy: "unknown",
    stress_level: "unknown"
  };
  obj.techniques ??= {
    greeting: "unknown", rapport: "unknown", needs: "unknown", value: "unknown",
    objection_handling: "unknown", next_step: "unknown", closing: "unknown",
    clarity: "unknown", compliance: "unknown"
  };
  if (!Array.isArray(obj.quotes)) obj.quotes = [];
  obj.summary ??= "unknown";
  if (!Array.isArray(obj.action_items)) obj.action_items = [];
}

/**
 * –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π total:
 * ‚Äî –ö–ª–∞–º–ø–∏–º –≤—Å–µ —Å–∞–±-–æ—Ü–µ–Ω–∫–∏ –∫ 0..10.
 * ‚Äî –ï—Å–ª–∏ intent="support" –ò–õ–ò techniques.value —Å–æ–¥–µ—Ä–∂–∏—Ç "N/A"/"–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ",
 *   –º–µ—Ç—Ä–∏–∫—É "value" –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è (–Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º).
 */
function normalizeScoresAndTotal(obj){
  const sc   = obj.score || {};
  const tech = obj.techniques || {};
  const intent = String(obj.intent || "").toLowerCase();

  for (const k of ["greeting","rapport","needs","value","objection_handling","next_step","closing","clarity","compliance"]) {
    sc[k] = clamp10(sc[k]);
  }

  const valueText = (tech.value || "").toLowerCase();
  const valueNA   = intent === "support" || valueText.includes("n/a") || valueText.includes("–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ");

  const metrics = [
    ["greeting", sc.greeting],
    ["rapport", sc.rapport],
    ["needs", sc.needs],
    ["value", sc.value, valueNA],  // —É—Å–ª–æ–≤–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º
    ["objection_handling", sc.objection_handling],
    ["next_step", sc.next_step],
    ["closing", sc.closing],
    ["clarity", sc.clarity],
    ["compliance", sc.compliance],
  ];

  let sum = 0, denom = 0;
  for (const [name, val, na] of metrics) {
    if (name === "value" && na) continue;
    sum += clamp10(val);
    denom += 10;
  }

  sc.total = denom > 0 ? Math.round((sum / denom) * 100) : 0;
}

/** –ü—Ä–∏–≤–æ–¥–∏–º —Ü–∏—Ç–∞—Ç—ã –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ–æ—Ä–º–µ */
function sanitizeQuotes(obj){
  if (!Array.isArray(obj.quotes)) { obj.quotes = []; return; }
  const mapRole = (r) => {
    const s = String(r || "").toLowerCase();
    if (s.includes("manager") || s.includes("–º–µ–Ω–µ–¥–∂")) return "manager";
    if (s.includes("customer") || s.includes("client") || s.includes("–∫–ª–∏–µ–Ω—Ç")) return "customer";
    if (s.includes("ivr") || s.includes("–∞–≤—Ç–æ")) return "ivr";
    return "customer";
  };
  obj.quotes = obj.quotes
    .map(q => ({ speaker: mapRole(q?.speaker), quote: String(q?.quote || "").trim() }))
    .filter(q => q.quote.length > 0)
    .slice(0, 5);
}

function toRuIntent(intent){
  const s = String(intent || "").toLowerCase();
  if (s === "sales")   return "–ø—Ä–æ–¥–∞–∂–∞";
  if (s === "support") return "–ø–æ–¥–¥–µ—Ä–∂–∫–∞/—Ä–µ–º–æ–Ω—Ç";
  if (s === "ivr")     return "IVR/–º–µ–Ω—é";
  return s || "unknown";
}

function roleRu(speaker){
  const s = String(speaker || "").toLowerCase();
  if (s.includes("manager"))  return "–º–µ–Ω–µ–¥–∂–µ—Ä";
  if (s.includes("customer")) return "–∫–ª–∏–µ–Ω—Ç";
  if (s.includes("ivr"))      return "–∞–≤—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä";
  return "–≥–æ–≤–æ—Ä—è—â–∏–π";
}

/** –ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–Ω–≥–ª. —è—Ä–ª—ã–∫–æ–≤ */
function ruify(text){
  const s = String(text || "").trim();
  const map = [
    [/^done\s*well$/i, "—Ö–æ—Ä–æ—à–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"],
    [/^partially$/i, "—á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"],
    [/^missed$/i, "–ø—Ä–æ–ø—É—â–µ–Ω–æ"],
    [/^n\/?a$/i, "–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ"],
    [/^polite$/i, "–≤–µ–∂–ª–∏–≤—ã–π"],
    [/^calm$/i, "—Å–ø–æ–∫–æ–π–Ω—ã–π"],
    [/^professional$/i, "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"],
    [/^impatient/i, "–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π"],
    [/^frustrat/i, "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ/—Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è"],
    [/^neutral$/i, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"],
    [/^negative$/i, "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π"],
    [/^positive$/i, "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π"],
    [/^low$/i, "–Ω–∏–∑–∫–∏–π"],
    [/^moderate$/i, "—É–º–µ—Ä–µ–Ω–Ω—ã–π"],
    [/^high$/i, "–≤—ã—Å–æ–∫–∏–π"],
  ];
  for (const [re, rep] of map) if (re.test(s)) return rep;
  return s;
}
