// telegram.js
import { Telegraf } from "telegraf";
import fetch from "node-fetch";
import fs from "fs";
import FormData from "form-data";
import { transcribeAudio } from "./asr.js";
import { analyzeTranscript, formatQaForTelegram } from "./qa_assistant.js";
import { getUnprocessedCalls, markCallProcessed } from "./supabaseStore.js";
import { safeStr } from "./utils.js";

let bot = null;
let TELEGRAM_BOT_TOKEN = null;
let TELEGRAM_CHAT_ID = null;
let TG_UPLOAD_CHAT_ID = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
 */
export async function initTelegram(env = process.env) {
  TELEGRAM_BOT_TOKEN = env.TELEGRAM_BOT_TOKEN || env.TG_BOT_TOKEN;
  TELEGRAM_CHAT_ID = env.TELEGRAM_CHAT_ID || env.TG_CHAT_ID;
  TG_UPLOAD_CHAT_ID = env.TG_UPLOAD_CHAT_ID || TELEGRAM_CHAT_ID;

  if (!TELEGRAM_BOT_TOKEN) {
    console.warn("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî Telegram –æ—Ç–∫–ª—é—á—ë–Ω");
    return;
  }

  bot = new Telegraf(TELEGRAM_BOT_TOKEN);

  // --- /start
  bot.start((ctx) =>
    ctx.reply("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ú–æ–∂–µ—à—å –∫–∏–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /scan")
  );

  // --- /scan (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤)
  bot.command("scan", async (ctx) => {
    await ctx.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–≤–æ–Ω–∫–∏...");
    await processCallsAndReport(ctx);
  });

  // --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏–∑ —á–∞—Ç–∞
  bot.on("voice", async (ctx) => {
    const fileId = ctx.message.voice.file_id;
    console.log(`üé§ –ü–æ–ª—É—á–µ–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π: ${fileId}`);
    await ctx.reply("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...");

    try {
      const fileRes = await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`
      );
      const fileInfo = await fileRes.json();
      const filePath = fileInfo.result.file_path;
      const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;

      const transcript = await transcribeAudio(fileUrl);
      if (!transcript) {
        await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
        return;
      }

      await ctx.reply(`üó£Ô∏è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n\n${transcript.slice(0, 4000)}`);

      const qa = await analyzeTranscript(transcript, { callId: "tg-voice" });
      const qaText = formatQaForTelegram(qa);
      await ctx.reply(`üìä –ê–Ω–∞–ª–∏–∑:\n${qaText}`);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:", err);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.");
    }
  });

  // --- —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã / –ø–æ–º–æ—â—å
  bot.on("text", async (ctx) => {
    const msg = ctx.message.text.trim().toLowerCase();
    if (msg === "ping") {
      await ctx.reply("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç");
    } else if (msg === "help" || msg === "–∫–æ–º–∞–Ω–¥—ã") {
      await ctx.reply("üì® –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n/scan ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–æ–Ω–∫–∏\nping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É");
    } else {
      await ctx.reply("ü§ñ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /scan");
    }
  });

  // --- –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–±–æ—Ç —Å–ª—É—à–∞–µ—Ç —á–∞—Ç)
  await bot.launch();
  console.log("ü§ñ Telegram –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling (—á–∏—Ç–∞–µ—Ç —á–∞—Ç)");

  // --- –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
  const AUTO_SCAN_MINUTES = parseInt(env.AUTO_SCAN_MINUTES || "5", 10);
  if (AUTO_SCAN_MINUTES > 0) {
    console.log(`üîÅ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–∂–¥—ã–µ ${AUTO_SCAN_MINUTES} –º–∏–Ω`);
    setInterval(async () => {
      console.log(`üïí –ê–≤—Ç–æ-—Å–∫–∞–Ω –∑–≤–æ–Ω–∫–æ–≤...`);
      await processCallsAndReport();
    }, AUTO_SCAN_MINUTES * 60 * 1000);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
export async function sendTGMessage(text, chatOverride = null) {
  try {
    const chatId = chatOverride || TELEGRAM_CHAT_ID;
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id: chatId, text, parse_mode: "HTML" }),
    });
  } catch (e) {
    console.error("‚ùå sendTGMessage:", safeStr(e));
  }
}

/**
 * Relay ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç mp3 –≤ Telegram –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
 */
export async function uploadToTelegramAndGetUrl(fileUrl) {
  try {
    console.log("üéß Uploading audio to Telegram via relay...");

    const res = await fetch(fileUrl);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${fileUrl}: ${res.status}`);

    const buffer = Buffer.from(await res.arrayBuffer());
    const tmpFile = `/tmp/audio_${Date.now()}.mp3`;
    fs.writeFileSync(tmpFile, buffer);

    const formData = new FormData();
    formData.append("chat_id", TG_UPLOAD_CHAT_ID);
    formData.append("document", fs.createReadStream(tmpFile));

    const uploadRes = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`,
      { method: "POST", body: formData }
    );
    const uploadJson = await uploadRes.json();

    if (!uploadJson.ok) throw new Error(uploadJson.description);

    const fileId = uploadJson.result.document.file_id;
    const fileInfoRes = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`
    );
    const fileInfo = await fileInfoRes.json();

    const filePath = fileInfo.result.file_path;
    const finalUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
    console.log("‚úÖ Relay –≥–æ—Ç–æ–≤:", finalUrl);

    return finalUrl;
  } catch (e) {
    console.error("‚ùå uploadToTelegramAndGetUrl:", safeStr(e));
    return null;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Supabase
 */
export async function processCallsAndReport(ctx = null) {
  try {
    const unprocessed = await getUnprocessedCalls(5);
    if (!unprocessed.length) {
      if (ctx) await ctx.reply("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤");
      else console.log("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤");
      return;
    }

    for (const call of unprocessed) {
      const { note_id, link } = call;
      console.log(`üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–≤–æ–Ω–æ–∫ #${note_id}`);

      let relayUrl = link;
      if (link && link.includes("megapbx.ru")) {
        relayUrl = await uploadToTelegramAndGetUrl(link);
      }

      if (!relayUrl) continue;

      const transcript = await transcribeAudio(relayUrl);
      if (!transcript) continue;

      const qa = await analyzeTranscript(transcript, { callId: note_id });
      const qaText = formatQaForTelegram(qa);

      const msg = `üìû <b>–ó–≤–æ–Ω–æ–∫ #${note_id}</b>\n${qaText}`;
      await sendTGMessage(msg);
      await markCallProcessed(note_id, transcript, qa);

      console.log(`‚úÖ –ó–≤–æ–Ω–æ–∫ #${note_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
    }

    if (ctx) await ctx.reply("‚úÖ –í—Å–µ –∑–≤–æ–Ω–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
  } catch (e) {
    console.error("‚ùå processCallsAndReport:", safeStr(e));
    if (ctx) await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–≤–æ–Ω–∫–æ–≤");
  }
}
