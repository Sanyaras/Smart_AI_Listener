// qa_assistant.js
import fetch from "node-fetch";
import { debug, safeStr } from "./utils.js";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const CALL_QA_MODEL = "gpt-4o-mini"; // –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏ –¥–µ—à—ë–≤–∞—è, –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ gpt-4o –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
const TIMEOUT_MS = 60000;
const MAX_RETRIES = 2;

if (!OPENAI_API_KEY) throw new Error("‚ùå OPENAI_API_KEY missing");

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∑–≤–æ–Ω–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–æ—Ü–µ–Ω–∫—É
 */
export async function analyzeTranscript(transcript, meta = {}) {
  if (!transcript?.trim()) throw new Error("Empty transcript");

  const systemPrompt = `
–í—ã ‚Äì AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–¥–µ–ª–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ iRazbil.
–í—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
–ù—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Å—Ç—Ä–æ–≥–æ JSON —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

{
  "intent": "sales" | "support",
  "score": {
    "greeting": 0-10,
    "rapport": 0-10,
    "needs": 0-10,
    "value": 0-10,
    "objection_handling": 0-10,
    "next_step": 0-10,
    "closing": 0-10,
    "clarity": 0-10,
    "compliance": 0-10,
    "total": 0-100
  },
  "psycho_emotional": {
    "customer_sentiment": "...",
    "manager_tone": "...",
    "manager_empathy": "...",
    "stress_level": "..."
  },
  "techniques": {
    "greeting": "...",
    "rapport": "...",
    "needs": "...",
    "value": "...",
    "objection_handling": "...",
    "next_step": "...",
    "closing": "...",
    "clarity": "...",
    "compliance": "..."
  },
  "quotes": [{ "speaker": "manager", "quote": "..." }],
  "summary": "...",
  "action_items": ["...", "..."]
}

–í—ã–≤–æ–¥ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
`;

  const userPrompt = `
CallID: ${meta.callId || "unknown"}
Direction: ${meta.direction || "unknown"}
From: ${meta.from || "-"} ‚Üí To: ${meta.to || "-"}
Brand: iRazbil

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:
${transcript.slice(0, 16000)}
`;

  const body = {
    model: CALL_QA_MODEL,
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt },
    ],
    temperature: 0.0,
    response_format: { type: "json_object" },
  };

  const result = await callOpenAIWithRetry(body, MAX_RETRIES);
  return result;
}

async function callOpenAIWithRetry(payload, retries = 2) {
  let lastErr;
  for (let i = 0; i <= retries; i++) {
    try {
      const ctrl = new AbortController();
      const timer = setTimeout(() => ctrl.abort(), TIMEOUT_MS);

      const res = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
        signal: ctrl.signal,
      });

      clearTimeout(timer);
      const json = await res.json();

      if (json?.choices?.[0]?.message?.content) {
        const txt = json.choices[0].message.content.trim();
        const clean = txt.replace(/^```json\s*|\s*```$/g, "");
        return JSON.parse(clean);
      }

      throw new Error("No valid response");
    } catch (e) {
      lastErr = e;
      debug(`‚ö†Ô∏è Retry ${i + 1}/${retries} ‚Äî ${safeStr(e)}`);
      await new Promise((r) => setTimeout(r, 1000 * (i + 1)));
    }
  }
  throw lastErr;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON-–æ—Ü–µ–Ω–∫—É –≤ HTML –¥–ª—è Telegram
 */
export function formatQaForTelegram(qa) {
  if (!qa || typeof qa !== "object") return "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞";

  const sc = qa.score || {};
  const pe = qa.psycho_emotional || {};
  const t = qa.techniques || {};
  const quotes = Array.isArray(qa.quotes) ? qa.quotes.slice(0, 3) : [];

  const lines = [
    "üìä <b>–û—Ü–µ–Ω–∫–∞ –∑–≤–æ–Ω–∫–∞</b>",
    `‚Ä¢ –¢–∏–ø: <b>${qa.intent}</b> ¬∑ –ò—Ç–æ–≥: <b>${sc.total}</b>/100`,
    "",
    "üß© <b>–¢–µ—Ö–Ω–∏–∫–∏</b>",
    `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: ${sc.greeting}, –†–∞–ø–ø–æ—Ä—Ç: ${sc.rapport}, –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: ${sc.needs}`,
    `–¶–µ–Ω–Ω–æ—Å—Ç—å: ${sc.value}, –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è: ${sc.objection_handling}, –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: ${sc.next_step}`,
    `–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${sc.closing}, –Ø—Å–Ω–æ—Å—Ç—å: ${sc.clarity}, –ö–æ–º–ø–ª–∞–µ–Ω—Å: ${sc.compliance}`,
    "",
    "üß† <b>–ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω</b>",
    `–ö–ª–∏–µ–Ω—Ç: ${pe.customer_sentiment} ¬∑ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${pe.manager_tone} ¬∑ –≠–º–ø–∞—Ç–∏—è: ${pe.manager_empathy}`,
    "",
    quotes.length ? "üí¨ <b>–¶–∏—Ç–∞—Ç—ã</b>:" : null,
    ...quotes.map((q) => `‚Ä¢ <b>${q.speaker}:</b> ‚Äú${q.quote}‚Äù`),
    "",
    qa.summary ? `üìù ${qa.summary}` : null,
    qa.action_items?.length
      ? ["üìå <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>", ...qa.action_items.map((i) => `‚Ä¢ ${i}`)].join("\n")
      : null,
  ].filter(Boolean);

  return lines.join("\n");
}
