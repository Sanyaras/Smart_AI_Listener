// telegram.js
import fetch from "node-fetch";
import { Telegraf } from "telegraf";
import fs from "fs";
import FormData from "form-data";
import { debug, safeStr } from "./utils.js";
import { getUnprocessedCalls, markCallProcessed } from "./supabaseStore.js";
import { transcribeAudio } from "./asr.js";
import { analyzeTranscript, formatQaForTelegram } from "./qa_assistant.js";

let TELEGRAM_BOT_TOKEN = null;
let TELEGRAM_CHAT_ID = null;
let TG_UPLOAD_CHAT_ID = null;
let bot = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ (polling + relay)
 */
export async function initTelegram(env = process.env) {
  TELEGRAM_BOT_TOKEN = env.TELEGRAM_BOT_TOKEN || env.TG_BOT_TOKEN;
  TELEGRAM_CHAT_ID = env.TELEGRAM_CHAT_ID || env.TG_CHAT_ID;
  TG_UPLOAD_CHAT_ID = env.TG_UPLOAD_CHAT_ID || TELEGRAM_CHAT_ID;

  if (!TELEGRAM_BOT_TOKEN) {
    console.warn("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω");
    return;
  }

  bot = new Telegraf(TELEGRAM_BOT_TOKEN);

  bot.start((ctx) => ctx.reply("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"));
  bot.command("scan", async (ctx) => {
    await ctx.reply("üîç –ù–∞—á–∏–Ω–∞—é —Ä—É—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤...");
    await processCallsAndReport(ctx);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("message", async (ctx) => {
    const msg = ctx.message;

    if (msg.voice || msg.audio) {
      const fileId = msg.voice?.file_id || msg.audio?.file_id;
      console.log(`üé§ –ü–æ–ª—É—á–µ–Ω –≥–æ–ª–æ—Å/–∞—É–¥–∏–æ file_id=${fileId}`);

      try {
        const fileRes = await fetch(
          `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`
        );
        const fileInfo = await fileRes.json();
        const filePath = fileInfo.result.file_path;
        const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;

        console.log("üéß –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–æ–ª–æ—Å:", fileUrl);
        await ctx.reply("üéß –û–±–Ω–∞—Ä—É–∂–µ–Ω –≥–æ–ª–æ—Å, –Ω–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...");

        const transcript = await transcribeAudio(fileUrl);
        if (transcript) {
          await ctx.reply(`üó£Ô∏è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n\n${transcript.slice(0, 4000)}`);

          const qa = await analyzeTranscript(transcript, { callId: "TG-AUDIO" });
          const qaText = formatQaForTelegram(qa);
          await ctx.reply(`üìä –ê–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–∞:\n${qaText}`);
        } else {
          await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å.");
        }
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:", err);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
      }
    } else if (msg.text) {
      console.log("üí¨ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg.text);
      await ctx.reply(
        "üì® –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n/scan ‚Äî –≤—Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–æ–Ω–∫–∏ –∏–∑ AmoCRM"
      );
    }
  });

  await bot.launch();
  console.log("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã (polling mode)");
  console.log(`üì© –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç: ${TELEGRAM_CHAT_ID}`);
  console.log(`üì¶ Relay —á–∞—Ç: ${TG_UPLOAD_CHAT_ID}`);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function sendTGMessage(text, chatOverride = null) {
  try {
    if (!bot || !TELEGRAM_BOT_TOKEN) {
      console.warn("‚ö†Ô∏è Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
      return;
    }

    const chatId = chatOverride || TELEGRAM_CHAT_ID;
    await bot.telegram.sendMessage(chatId, text, { parse_mode: "HTML" });
    debug("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram");
  } catch (e) {
    console.error("‚ùå sendTGMessage:", e.message);
  }
}

/**
 * Relay-–∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Telegram
 * ‚Äî —Å–∫–∞—á–∏–≤–∞–µ—Ç mp3 —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
 * ‚Äî –∑–∞–ª–∏–≤–∞–µ—Ç –µ–≥–æ –≤ TG_UPLOAD_CHAT_ID
 * ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
 */
export async function uploadToTelegramAndGetUrl(mp3Url) {
  try {
    console.log("üéß Uploading audio to Telegram via relay...");
    if (!TELEGRAM_BOT_TOKEN || !TG_UPLOAD_CHAT_ID) {
      console.warn("‚ö†Ô∏è Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî relay –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ");
      return null;
    }

    const res = await fetch(mp3Url);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${mp3Url}: ${res.status}`);
    const buffer = await res.arrayBuffer();

    const tmpFile = `/tmp/audio_${Date.now()}.mp3`;
    fs.writeFileSync(tmpFile, Buffer.from(buffer));

    const formData = new FormData();
    formData.append("chat_id", TG_UPLOAD_CHAT_ID);
    formData.append("document", fs.createReadStream(tmpFile));

    const uploadUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`;
    const uploadRes = await fetch(uploadUrl, { method: "POST", body: formData });
    const uploadJson = await uploadRes.json();

    if (!uploadJson.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Telegram upload:", uploadJson);
      return null;
    }

    const fileId = uploadJson.result.document.file_id;
    const fileInfoRes = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`
    );
    const fileInfo = await fileInfoRes.json();

    if (!fileInfo.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è file_path:", fileInfo);
      return null;
    }

    const filePath = fileInfo.result.file_path;
    const finalUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
    console.log("‚úÖ Relay –≥–æ—Ç–æ–≤:", finalUrl);
    return finalUrl;
  } catch (e) {
    console.error("‚ùå uploadToTelegramAndGetUrl:", safeStr(e));
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
 * ‚Äî –¥–æ—Å—Ç–∞—ë—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Supabase
 * ‚Äî —Å–∫–∞—á–∏–≤–∞–µ—Ç, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç
 */
export async function processCallsAndReport(ctx = null) {
  try {
    const unprocessed = await getUnprocessedCalls(5);
    if (!unprocessed.length) {
      const msg = "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏";
      console.log(msg);
      if (ctx) await ctx.reply(msg);
      return;
    }

    for (const call of unprocessed) {
      const { note_id, link } = call;
      console.log(`üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–≤–æ–Ω–æ–∫ #${note_id}`);

      let relayUrl = link;
      if (link && link.includes("megapbx.ru")) {
        relayUrl = await uploadToTelegramAndGetUrl(link);
      }

      if (!relayUrl) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É –¥–ª—è:", link);
        continue;
      }

      const transcript = await transcribeAudio(relayUrl);
      if (!transcript) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–æ–∫:", note_id);
        continue;
      }

      const qa = await analyzeTranscript(transcript, { callId: note_id });
      const qaText = formatQaForTelegram(qa);

      const msg = `üìû <b>–ó–≤–æ–Ω–æ–∫ #${note_id}</b>\n${qaText}`;
      await sendTGMessage(msg);
      await markCallProcessed(note_id, transcript, qa);

      console.log(`‚úÖ –ó–≤–æ–Ω–æ–∫ #${note_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
    }

    if (ctx) await ctx.reply("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
  } catch (e) {
    console.error("‚ùå processCallsAndReport:", safeStr(e));
    if (ctx) await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–≤–æ–Ω–∫–æ–≤");
  }
}
